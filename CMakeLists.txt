cmake_minimum_required(VERSION 3.2)

PROJECT(luahttpclient)
INCLUDE(cmake/ModuleImport.cmake)
LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
INCLUDE(cmake/ModuleCompileOptions.cmake)
ModuleSetCompileOptions()

SET(LUAHTTPCLIENT_VERSION_MAJOR "1")
SET(LUAHTTPCLIENT_VERSION_MINOR "0")
SET(LUAHTTPCLIENT_VERSION_PATCH "1")
SET(LUAHTTPCLIENT_VERSION "${LUAHTTPCLIENT_VERSION_MAJOR}.${LUAHTTPCLIENT_VERSION_MINOR}.${LUAHTTPCLIENT_VERSION_PATCH}")

MESSAGE(STATUS "VERSION: ${LUAHTTPCLIENT_VERSION}")

ADD_DEFINITIONS(-DUSE_LUAHTTPCLIENT)
ADD_DEFINITIONS(-DLUA_COMPAT_MODULE -DLUA_COMPAT_APIINTCASTS)
ModuleImport("dmcurl" "thirdparty/dmcurl")

IF (WIN32)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/windows)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/lua)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/test)

FILE(GLOB DMLUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/*.h
)

LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "lua.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "luac.c$")
LIST(FILTER DMLUA_SOURCES EXCLUDE REGEX "wmain.c$")

FILE(GLOB LUA_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/src/lua/lua.c
)

FILE(GLOB LUAHTTPCLIENT_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/include/*.h

${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/*.c
${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/*.h
)

IF (WIN32)
    LIST(APPEND LUAHTTPCLIENT_SOURCES)
ENDIF(WIN32)

FILE(GLOB_RECURSE LUAHTTPCLIENTTEST_SOURCES
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.cc
${CMAKE_CURRENT_SOURCE_DIR}/test/*.c
${CMAKE_CURRENT_SOURCE_DIR}/test/*.hpp
${CMAKE_CURRENT_SOURCE_DIR}/test/*.h)

IF (WIN32)
    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_CORE")
        
        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(luahttpclient SHARED ${LUAHTTPCLIENT_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/src/luahttpclient/luahttpclient_module.def)
    TARGET_LINK_LIBRARIES(luahttpclient lua53 libcurl curlpp)

    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL -DLUA_LIB")

    IF (USE_LUAHTTPCLIENT_TEST)
        ADD_EXECUTABLE(luahttpclienttest ${LUAHTTPCLIENTTEST_SOURCES})
        TARGET_LINK_LIBRARIES(luahttpclienttest luahttpclient)
        SET_TARGET_PROPERTIES(luahttpclienttest PROPERTIES COMPILE_FLAGS "-DLUA_BUILD_AS_DLL")
    ENDIF(USE_LUAHTTPCLIENT_TEST)

ELSEIF (APPLE)
    ADD_DEFINITIONS(-DLUA_USE_MACOSX)
    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-Wl,-undefined -Wl,dynamic_lookup" )
        SET_TARGET_PROPERTIES(lua53 PROPERTIES SUFFIX ".so")

        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53 dl libcurl curlpp)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(luahttpclient SHARED ${LUAHTTPCLIENT_SOURCES})
    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES COMPILE_FLAGS "-Wl,-undefined -Wl,dynamic_lookup" )
    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES PREFIX "")
    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES SUFFIX ".so")

    TARGET_LINK_LIBRARIES(luahttpclient lua53)

    IF (USE_LUAHTTPCLIENT_TEST)
        ADD_EXECUTABLE(luahttpclienttest ${LUAHTTPCLIENTTEST_SOURCES})
        TARGET_LINK_LIBRARIES(luahttpclienttest luahttpclient)
    ENDIF(USE_LUAHTTPCLIENT_TEST)   
ELSEIF (UNIX)
    ADD_DEFINITIONS(-DLUA_USE_LINUX)

    IF (USE_LUA_INNER)
        ADD_LIBRARY(lua53 SHARED ${DMLUA_SOURCES})
        SET_TARGET_PROPERTIES(lua53 PROPERTIES COMPILE_FLAGS "-Wl,-E" )

        ADD_EXECUTABLE(lua ${LUA_SOURCES})
        TARGET_LINK_LIBRARIES(lua lua53 m dl libcurl curlpp)
    ENDIF(USE_LUA_INNER)

    ADD_LIBRARY(luahttpclient SHARED ${LUAHTTPCLIENT_SOURCES})
    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES COMPILE_FLAGS "-Wl,-E" )
    SET_TARGET_PROPERTIES(luahttpclient PROPERTIES PREFIX "")
    TARGET_LINK_LIBRARIES(luahttpclient lua53)
    
    IF (USE_LUAHTTPCLIENT_TEST)
        ADD_EXECUTABLE(luahttpclienttest ${LUAHTTPCLIENTTEST_SOURCES})
        TARGET_LINK_LIBRARIES(luahttpclienttest luahttpclient)
    ENDIF(USE_LUAHTTPCLIENT_TEST)   
ENDIF ()


#ADD_CUSTOM_COMMAND(
#TARGET luahttpclienttest
#PRE_BUILD
#COMMAND ${CMAKE_COMMAND} -E copy_if_different
#${CMAKE_CURRENT_SOURCE_DIR}/config/test.csv
#$<TARGET_FILE_DIR:luahttpclienttest>
#)

#INSTALL(DIRECTORY include/ DESTINATION include)
#INSTALL(TARGETS luahttpclient
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib)

#SET(LUAHTTPCLIENT_LIBS "luahttpclient")
#MARK_AS_ADVANCED(${LUAHTTPCLIENT_LIBS})
